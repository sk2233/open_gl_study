#version 120
#define LOWPREC 
#define lowp
#define mediump
#define highp
#define precision
// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes

uniform sampler2D gm_BaseTexture;

uniform bool gm_PS_FogEnabled;
uniform vec4 gm_FogColour;
uniform bool gm_AlphaTestEnabled;
uniform float gm_AlphaRefValue;

void DoAlphaTest(vec4 SrcColour)
{
	if (gm_AlphaTestEnabled)
	{
		if (SrcColour.a <= gm_AlphaRefValue)
		{
			discard;
		}
	}
}

void DoFog(inout vec4 SrcColour, float fogval)
{
	if (gm_PS_FogEnabled)
	{
		SrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); 
	}
}

#define _YY_GLSL_ 1
varying vec2 v_vTexcoord;
varying vec4 v_vColour;
varying vec2 v_vFragCoord;

uniform float time;	//	シェーダソース外からの引用
uniform vec2 resolution;//	シェーダソース外からの引用

void main()
{
//	計算内容が妙ちきりんなので注意！

//	本当は直に値入れてもよさそうだけど、変数確保しておく。
  vec2 v_texTrans = v_vTexcoord;

  //  X軸方向のスクロール変更
  float w = 0.1*cos(time+0.05*v_vFragCoord.y);

  //  Y軸方向のスクロール変更（しっくり来ないので負の数入れたりした）
  v_texTrans.x += w*0.5*cos(0.04*(-v_vFragCoord.y+2.0));

  //  最終的なテクスチャ座標を反映（gm_BaseTextureはテクスチャ名）
  vec4 col = texture2D( gm_BaseTexture, v_texTrans);
  //	ちなみにここでcolの値を計測して特定の色だったら透過するとか処理描くと面白い

//	FragColorに値を入力。
  gl_FragColor = col;
}
