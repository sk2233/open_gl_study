/*
@author: sk
@date: 2023/6/23
*/
package utils

import (
	"bytes"
	"encoding/binary"
	"encoding/json"
	"io"
	"math"

	"github.com/go-gl/mathgl/mgl32"
)

// 纯数据对象
type Vxl struct {
	Header      *VxlHeader
	LimbHeaders []*VxlLimbHeader
	LimbBodies  []*VxlLimbBody
	LimbTails   []*VxlLimbTail
}

func (v *Vxl) String() string {
	bs, err := json.Marshal(v)
	HandleErr(err)
	return string(bs)
}

type VxlHeader struct {
	FileType  string // 也是固定的 Voxel Animation
	UnKnown1  uint32 // 总是 1
	LimbCount uint32 // n_limbs 与 n_limbs2 都是一样的 使用同一个
	BodySize  uint32
	UnKnown2  uint16    // 总是   0x1F10
	Palette   [][]uint8 `json:"-"` // 256 色盘  rgb
}

type VxlLimbHeader struct {
	LimbName   string
	LimbNumber uint32
	UnKnown1   uint32 // 总是 1
	UnKnown2   uint32 // 总是 0
}

type VxlLimbBody struct {
	StartOffsets []uint32
	EndOffsets   []uint32
	Reader       io.ReadSeeker `json:"-"`
}

type VxlLimbTail struct {
	StartOffset         uint32
	EndOffset           uint32
	DataOffset          uint32
	Transform           []float32 // 4*3
	Scale               float32
	SizeX, SizeY, SizeZ uint8
	UnKnown             uint8 // 总是 1
	Bounds              []float32
}

// 对外使用对象
type Ra2Obj struct {
	// 位置 3  颜色 3  法线 3
	Data      []float32
	Transform mgl32.Mat4
	Scale     float32
}

func (r *Ra2Obj) String() string {
	bs, err := json.Marshal(r)
	HandleErr(err)
	return string(bs)
}

func (v *Vxl) ParseRa2Objs() []*Ra2Obj {
	res := make([]*Ra2Obj, 0)
	for i := 0; i < len(v.LimbHeaders); i++ {
		res = append(res, v.ParseRa2Obj(i))
	}
	return res
}

func (v *Vxl) ParseRa2Obj(index int) *Ra2Obj {
	limbTail := v.LimbTails[index]
	limbBody := v.LimbBodies[index]
	// 原矩阵  列存储
	transform := mgl32.Mat4{}
	for i := 0; i < 4; i++ {
		transform[i*4] = limbTail.Transform[i]
		transform[i*4+1] = limbTail.Transform[i+4]
		transform[i*4+2] = limbTail.Transform[i+8]
		transform[i*4+3] = 0
	}
	transform[15] = 1
	baseOffset := int64(limbTail.DataOffset)
	startOffsets := limbBody.StartOffsets
	endOffsets := limbBody.EndOffsets
	sizeX, sizeY, sizeZ := int(limbTail.SizeX), int(limbTail.SizeY), int(limbTail.SizeZ)
	reader := limbBody.Reader
	data := make([]float32, 0)
	for x := 0; x < sizeX; x++ {
		for y := 0; y < sizeY; y++ {
			i := x + y*sizeX
			startOffset := int64(startOffsets[i])
			endOffset := endOffsets[i]
			if startOffset == 0xFFFFFFFF || endOffset == 0xFFFFFFFF {
				continue
			}
			seek(reader, baseOffset+startOffset)
			z := 0
			for true {
				bs := readBytes(reader, 2)
				z += int(bs[0]) // 跳过指定方块
				count := int(bs[1])
				if count == 0 { // 0个方块 结束标记
					break
				}
				bs = readBytes(reader, uint64(2*count))
				for j := 0; j < count; j++ {
					data = append(data, float32(x-sizeX/2), float32(y-sizeY/2), float32(z-sizeZ/2))
					col := v.GetColor(int(bs[j*2]))
					data = append(data, col...)
					norIndex := Min(int(bs[j*2+1]), len(normalPaletteRa2)-1)
					data = append(data, normalPaletteRa2[norIndex]...)
					z++
				}
				readBytes(reader, 1) // 结尾 校验方块数量可以直接抛弃
			}
		}
	}
	return &Ra2Obj{
		Transform: transform,
		Scale:     limbTail.Scale,
		Data:      data,
	}
}

func (v *Vxl) GetColor(index int) []float32 {
	col := v.Header.Palette[index]
	return []float32{float32(col[0]) / 256, float32(col[1]) / 256, float32(col[2]) / 256}
}

func ParseVxl(name string) *Vxl {
	reader := OpenFile(name)
	defer reader.Close()
	// Header
	header := &VxlHeader{}
	header.FileType = readStr(reader, 16)
	uint32s := readUint32s(reader, 4)
	header.UnKnown1 = uint32s[0]
	header.LimbCount = uint32s[1]
	header.LimbCount = uint32s[2]
	header.BodySize = uint32s[3]
	header.UnKnown2 = readUint16s(reader, 1)[0]
	bs := readBytes(reader, 256*3)
	for i := 0; i < 256; i++ {
		header.Palette = append(header.Palette, []uint8{bs[i*3], bs[i*3+1], bs[i*3+2]})
	}
	// LimbHeaders
	limbHeaders := make([]*VxlLimbHeader, 0)
	for i := 0; i < int(header.LimbCount); i++ {
		limbHeader := &VxlLimbHeader{}
		limbHeader.LimbName = readStr(reader, 16)
		uint32s = readUint32s(reader, 3)
		limbHeader.LimbNumber = uint32s[0]
		limbHeader.UnKnown1 = uint32s[1]
		limbHeader.UnKnown2 = uint32s[2]
		limbHeaders = append(limbHeaders, limbHeader)
	}
	// bodyReader
	bodyReader := readReader(reader, uint64(header.BodySize))
	// LimbTails
	limbTails := make([]*VxlLimbTail, 0)
	for i := 0; i < int(header.LimbCount); i++ {
		limbTail := &VxlLimbTail{}
		uint32s = readUint32s(reader, 3)
		limbTail.StartOffset = uint32s[0]
		limbTail.EndOffset = uint32s[1]
		limbTail.DataOffset = uint32s[2]
		limbTail.Scale = readFloat32s(reader, 1)[0]
		limbTail.Transform = readFloat32s(reader, 12)
		limbTail.Bounds = readFloat32s(reader, 6)
		bs = readBytes(reader, 4)
		limbTail.SizeX = bs[0]
		limbTail.SizeY = bs[1]
		limbTail.SizeZ = bs[2]
		limbTail.UnKnown = bs[3]
		limbTails = append(limbTails, limbTail)
	}
	// LimbBodies
	limbBodies := make([]*VxlLimbBody, 0)
	for i := 0; i < len(limbTails); i++ {
		limbBody := &VxlLimbBody{}
		l := uint64(limbTails[i].SizeX) * uint64(limbTails[i].SizeY)
		seek(bodyReader, int64(limbTails[i].StartOffset))
		limbBody.StartOffsets = readUint32s(bodyReader, l)
		seek(bodyReader, int64(limbTails[i].EndOffset))
		limbBody.EndOffsets = readUint32s(bodyReader, l)
		limbBody.Reader = bodyReader
		limbBodies = append(limbBodies, limbBody)
	}
	return &Vxl{
		Header:      header,
		LimbHeaders: limbHeaders,
		LimbBodies:  limbBodies,
		LimbTails:   limbTails,
	}
}

func seek(reader io.ReadSeeker, offset int64) {
	_, err := reader.Seek(offset, io.SeekStart)
	HandleErr(err)
}

func readFloat32s(reader io.Reader, l uint64) []float32 {
	temp := readUint32s(reader, l)
	res := make([]float32, l)
	for i := 0; i < int(l); i++ {
		res[i] = math.Float32frombits(temp[i])
	}
	return res
}

func readReader(reader io.Reader, l uint64) io.ReadSeeker {
	bs := readBytes(reader, l)
	return bytes.NewReader(bs)
}

func readUint16s(reader io.Reader, l uint64) []uint16 {
	return readTs(reader, l, func(reader io.Reader) uint16 {
		bs := readBytes(reader, 2)
		return binary.LittleEndian.Uint16(bs)
	})
}

func readTs[T uint16 | uint32 | float32](reader io.Reader, l uint64, f func(reader io.Reader) T) []T {
	res := make([]T, l)
	for i := 0; i < int(l); i++ {
		res[i] = f(reader)
	}
	return res
}

func readUint32s(reader io.Reader, l uint64) []uint32 {
	return readTs(reader, l, func(reader io.Reader) uint32 {
		bs := readBytes(reader, 4)
		return binary.LittleEndian.Uint32(bs)
	})
}

func readStr(reader io.Reader, l uint64) string {
	bs := readBytes(reader, l)
	return string(bs)
}

func readBytes(reader io.Reader, l uint64) []byte {
	bs := make([]byte, l)
	_, err := reader.Read(bs)
	HandleErr(err)
	return bs
}

// 红警2 法线色盘
var normalPaletteRa2 = [][]float32{ // Front, Left, Up
	{0.526578009128571, -0.359620988368988, -0.770317018032074},
	{0.150481998920441, 0.43598398566246, 0.887283980846405},
	{0.414195001125336, 0.738255023956299, -0.532374024391174},
	{0.0751520022749901, 0.916248977184296, -0.393498003482819},
	{-0.316148996353149, 0.930736005306244, -0.183792993426323},
	{-0.773819029331207, 0.623333990573883, -0.112510003149509},
	{-0.900842010974884, 0.428537011146545, -0.0695680007338524},
	{-0.998942017555237, -0.010971000418067, 0.0446650013327599},
	{-0.979761004447937, -0.157670006155968, -0.123323999345303},
	{-0.911274015903473, -0.362370997667313, -0.195620000362396},
	{-0.624068975448608, -0.720941007137299, -0.301301002502441},
	{-0.310173004865646, -0.809345006942749, -0.498751997947693},
	{0.146613001823425, -0.815819025039673, -0.559414029121399},
	{-0.716516017913818, -0.694356024265289, -0.0668879970908165},
	{0.503971993923187, -0.114202000200748, -0.856136977672577},
	{0.455491006374359, 0.872627019882202, -0.176210999488831},
	{-0.00500999996438622, -0.114372998476028, -0.993425011634827},
	{-0.104675002396107, -0.32770100235939, -0.938965022563934},
	{0.560411989688873, 0.752588987350464, -0.345755994319916},
	{-0.0605759993195534, 0.821627974510193, -0.566796004772186},
	{-0.302341014146805, 0.797007024288178, -0.52284699678421},
	{-0.671543002128601, 0.670740008354187, -0.314862996339798},
	{-0.778401017189026, -0.128356993198395, 0.614504992961884},
	{-0.924049973487854, 0.278382003307343, -0.261985003948212},
	{-0.699773013591766, -0.550490975379944, -0.455278009176254},
	{-0.568247973918915, -0.517189025878906, -0.640007972717285},
	{0.0540979988873005, -0.932864010334015, -0.356142997741699},
	{0.758382022380829, 0.572893023490906, -0.31088799238205},
	{0.00362000009045005, 0.305025994777679, -0.952337026596069},
	{-0.0608499981462956, -0.986886024475098, -0.149510994553566},
	{0.635230004787445, 0.0454780012369156, -0.770982980728149},
	{0.521704971790314, 0.241309002041817, -0.818287014961243},
	{0.269403994083405, 0.635424971580505, -0.723640978336334},
	{0.0456760004162788, 0.672753989696503, -0.73845499753952},
	{-0.180510997772217, 0.674656987190247, -0.715718984603882},
	{-0.397130995988846, 0.636640012264252, -0.661041975021362},
	{-0.552003979682922, 0.472514986991882, -0.687038004398346},
	{-0.772170007228851, 0.0830899998545647, -0.629960000514984},
	{-0.669818997383118, -0.119533002376556, -0.732840001583099},
	{-0.540454983711243, -0.318444013595581, -0.77878201007843},
	{-0.386135011911392, -0.522789001464844, -0.759993970394135},
	{-0.26146599650383, -0.688566982746124, -0.676394999027252},
	{-0.0194119997322559, -0.696102976799011, -0.717679977416992},
	{0.303568989038467, -0.481844007968903, -0.821992993354797},
	{0.681939005851746, -0.195129007101059, -0.704900026321411},
	{-0.244889006018639, -0.116562001407146, -0.962518990039825},
	{0.800759017467499, -0.0229790005832911, -0.598546028137207},
	{-0.370274990797043, 0.0955839976668358, -0.923991024494171},
	{-0.330671012401581, -0.326577991247177, -0.885439991950989},
	{-0.163220003247261, -0.527579009532928, -0.833679020404816},
	{0.126389995217323, -0.313145995140076, -0.941256999969482},
	{0.349548012018204, -0.272226005792618, -0.896498024463654},
	{0.239917993545532, -0.0858250036835671, -0.966992020606995},
	{0.390845000743866, 0.0815370008349419, -0.916837990283966},
	{0.2552669942379, 0.268696993589401, -0.928785026073456},
	{0.146245002746582, 0.480437994003296, -0.864749014377594},
	{-0.326016008853912, 0.478455990552902, -0.815348982810974},
	{-0.46968200802803, -0.112519003450871, -0.875635981559753},
	{0.818440020084381, -0.258520007133484, -0.513150990009308},
	{-0.474317997694015, 0.292237997055054, -0.830433011054993},
	{0.778943002223969, 0.395841985940933, -0.486371010541916},
	{0.624094009399414, 0.39377298951149, -0.674870014190674},
	{0.740885972976685, 0.203833997249603, -0.639953017234802},
	{0.480217009782791, 0.565768003463745, -0.670297026634216},
	{0.380930006504059, 0.424535006284714, -0.821377992630005},
	{-0.0934220030903816, 0.501124024391174, -0.860318005084991},
	{-0.236485004425049, 0.296198010444641, -0.925387024879456},
	{-0.131531000137329, 0.0939590036869049, -0.986849009990692},
	{-0.823562026023865, 0.29577699303627, -0.484005987644196},
	{0.611065983772278, -0.624303996562958, -0.486663997173309},
	{0.0694959983229637, -0.520330011844635, -0.851132988929748},
	{0.226521998643875, -0.664879024028778, -0.711775004863739},
	{0.471307992935181, -0.568903982639313, -0.673956990242004},
	{0.38842499256134, -0.74262398481369, -0.545560002326965},
	{0.783675014972687, -0.480729013681412, -0.393384993076324},
	{0.962393999099731, 0.135675996541977, -0.235348999500275},
	{0.876607000827789, 0.172033995389938, -0.449405997991562},
	{0.633405029773712, 0.589793026447296, -0.500940978527069},
	{0.182275995612144, 0.800657987594605, -0.570720970630646},
	{0.177002996206284, 0.764133989810944, 0.620297014713287},
	{-0.544016003608704, 0.675514996051788, -0.497720986604691},
	{-0.679296970367432, 0.286466985940933, -0.675642013549805},
	{-0.590390980243683, 0.0913690030574799, -0.801928997039795},
	{-0.824360013008118, -0.133123993873596, -0.550189018249512},
	{-0.715794026851654, -0.334542006254196, -0.612960994243622},
	{0.174285992980003, -0.8924840092659, 0.416049003601074},
	{-0.0825280025601387, -0.837122976779938, -0.54075300693512},
	{0.283331006765366, -0.88087397813797, -0.379189014434814},
	{0.675134003162384, -0.42662701010704, -0.601817011833191},
	{0.843720018863678, -0.512335002422333, -0.16015599668026},
	{0.977303981781006, -0.0985559970140457, -0.187519997358322},
	{0.84629499912262, 0.52267199754715, -0.102946996688843},
	{0.677141010761261, 0.721324980258942, -0.145501002669334},
	{0.320964992046356, 0.870891988277435, -0.372193992137909},
	{-0.178977996110916, 0.911532998085022, -0.37023600935936},
	{-0.447169005870819, 0.826700985431671, -0.341473996639252},
	{-0.703203022480011, 0.496327996253967, -0.50908100605011},
	{-0.977181017398834, 0.0635629966855049, -0.202674001455307},
	{-0.878170013427734, -0.412937998771667, 0.241455003619194},
	{-0.835830986499786, -0.358550012111664, -0.415728002786636},
	{-0.499173998832703, -0.693432986736298, -0.519591987133026},
	{-0.188788995146751, -0.923753023147583, -0.333225011825562},
	{0.19225400686264, -0.969361007213593, -0.152896001935005},
	{0.515940010547638, -0.783906996250153, -0.345391988754272},
	{0.90592497587204, -0.300951987504959, -0.297870993614197},
	{0.991111993789673, -0.127746000885963, 0.0371069982647896},
	{0.995135009288788, 0.0984240025281906, -0.0043830000795424},
	{0.760123014450073, 0.646277010440826, 0.0673670023679733},
	{0.205220997333527, 0.95958000421524, -0.192590996623039},
	{-0.0427500009536743, 0.979512989521027, -0.196790993213654},
	{-0.438017010688782, 0.898926973342895, 0.00849200040102005},
	{-0.821994006633759, 0.480785012245178, -0.305238991975784},
	{-0.899917006492615, 0.0817100033164024, -0.428337007761002},
	{-0.926612019538879, -0.144618004560471, -0.347095996141434},
	{-0.79365998506546, -0.557792007923126, -0.242838993668556},
	{-0.431349992752075, -0.847778975963593, -0.308557987213135},
	{-0.00549199990928173, -0.964999973773956, 0.262192994356155},
	{0.587904989719391, -0.804026007652283, -0.0889400020241737},
	{0.699492990970612, -0.667685985565186, -0.254765003919601},
	{0.889303028583527, 0.35979500412941, -0.282290995121002},
	{0.780972003936768, 0.197036996483803, 0.592671990394592},
	{0.520120978355408, 0.506695985794067, 0.687556982040405},
	{0.403894990682602, 0.693961024284363, 0.59605997800827},
	{-0.154982998967171, 0.899236023426056, 0.409090012311935},
	{-0.65733802318573, 0.537168025970459, 0.528542995452881},
	{-0.746195018291473, 0.334091007709503, 0.57582700252533},
	{-0.624952018260956, -0.0491439998149872, 0.77911502122879},
	{0.318141013383865, -0.254714995622635, 0.913185000419617},
	{-0.555896997451782, 0.405294001102447, 0.725751996040344},
	{-0.794434010982513, 0.0994059965014458, 0.599160015583038},
	{-0.64036101102829, -0.689463019371033, 0.3384949862957},
	{-0.126712992787361, -0.734094977378845, 0.667119979858398},
	{0.105457000434399, -0.780816972255707, 0.615795016288757},
	{0.407992988824844, -0.480915993452072, 0.776054978370666},
	{0.69513601064682, -0.545120000839233, 0.468647003173828},
	{0.973191022872925, -0.00648899981752038, 0.229908004403114},
	{0.946893990039825, 0.31750899553299, -0.0507990010082722},
	{0.563583016395569, 0.825612008571625, 0.0271829999983311},
	{0.325773000717163, 0.945423007011414, 0.00694900006055832},
	{-0.171820998191834, 0.985096991062164, -0.00781499966979027},
	{-0.670440971851349, 0.739938974380493, 0.0547689981758594},
	{-0.822980999946594, 0.554961979389191, 0.121321998536587},
	{-0.96619302034378, 0.117857001721859, 0.229306995868683},
	{-0.953769028186798, -0.294703990221024, 0.0589450001716614},
	{-0.864386975765228, -0.50272798538208, -0.0100149996578693},
	{-0.530609011650085, -0.842006027698517, -0.0973659977316856},
	{-0.16261799633503, -0.984075009822845, 0.071772001683712},
	{0.081446997821331, -0.996011018753052, 0.0364390015602112},
	{0.745984017848968, -0.665962994098663, 0.000761999981477857},
	{0.942057013511658, -0.329268991947174, -0.0641060024499893},
	{0.939701974391937, -0.2810899913311, 0.19480299949646},
	{0.771214008331299, 0.550670027732849, 0.319362998008728},
	{0.641348004341126, 0.730690002441406, 0.234020993113518},
	{0.0806820020079613, 0.996690988540649, 0.00987899955362082},
	{-0.0467250011861324, 0.976643025875092, 0.209725007414818},
	{-0.531076014041901, 0.821000993251801, 0.209562003612518},
	{-0.695815026760101, 0.65599000453949, 0.292434990406036},
	{-0.97612202167511, 0.21670900285244, -0.0149130001664162},
	{-0.961660981178284, -0.144128993153572, 0.233313992619514},
	{-0.77208399772644, -0.613646984100342, 0.165298998355865},
	{-0.449600011110306, -0.836059987545013, 0.314426004886627},
	{-0.392699986696243, -0.914615988731384, 0.0962470024824142},
	{0.390588998794556, -0.919470012187958, 0.0448900014162064},
	{0.582529008388519, -0.799197971820831, 0.148127004504204},
	{0.866430997848511, -0.489811986684799, 0.0968639999628067},
	{0.904586970806122, 0.11149799823761, 0.411449998617172},
	{0.953536987304687, 0.232329994440079, 0.191806003451347},
	{0.497310996055603, 0.770802974700928, 0.398176997900009},
	{0.194066002964973, 0.956319987773895, 0.218611001968384},
	{0.422876000404358, 0.882275998592377, 0.206797003746033},
	{-0.373796999454498, 0.849565982818604, 0.372173994779587},
	{-0.534497022628784, 0.714022994041443, 0.452199995517731},
	{-0.881826996803284, 0.237159997224808, 0.407597988843918},
	{-0.904947996139526, -0.0140690002590418, 0.425289005041122},
	{-0.751827001571655, -0.512817025184631, 0.414458006620407},
	{-0.50101500749588, -0.697916984558105, 0.511758029460907},
	{-0.235190004110336, -0.925922989845276, 0.295554995536804},
	{0.228982999920845, -0.953939974308014, 0.193819001317024},
	{0.734025001525879, -0.634898006916046, 0.241062000393867},
	{0.913752973079681, -0.0632530003786087, -0.401315987110138},
	{0.905735015869141, -0.161486998200417, 0.391874998807907},
	{0.858929991722107, 0.342445999383926, 0.380748987197876},
	{0.624486029148102, 0.60758101940155, 0.490776985883713},
	{0.289263993501663, 0.857478976249695, 0.425507992506027},
	{0.0699680000543594, 0.902168989181519, 0.425671011209488},
	{-0.28617998957634, 0.940699994564056, 0.182164996862411},
	{-0.574012994766235, 0.805118978023529, -0.149308994412422},
	{0.111258000135422, 0.0997179970145225, -0.988776028156281},
	{-0.305393010377884, -0.944227993488312, -0.123159997165203},
	{-0.601166009902954, -0.78957599401474, 0.123162999749184},
	{-0.290645003318787, -0.812139987945557, 0.505918979644775},
	{-0.064920000731945, -0.877162992954254, 0.475784987211227},
	{0.408300995826721, -0.862215995788574, 0.299789011478424},
	{0.566097021102905, -0.725566029548645, 0.391263991594315},
	{0.839363992214203, -0.427386999130249, 0.335869014263153},
	{0.818899989128113, -0.0413050018250942, 0.572448015213013},
	{0.719784021377564, 0.414997011423111, 0.556496977806091},
	{0.881744027137756, 0.450269997119904, 0.140659004449844},
	{0.40182301402092, -0.898220002651215, -0.178151994943619},
	{-0.0540199987590313, 0.791343986988068, 0.608980000019074},
	{-0.293774008750916, 0.763993978500366, 0.574464976787567},
	{-0.450798004865646, 0.610346972942352, 0.651350975036621},
	{-0.638221025466919, 0.186693996191025, 0.746873021125793},
	{-0.872870028018951, -0.257126986980438, 0.414707988500595},
	{-0.587257027626038, -0.521709978580475, 0.618827998638153},
	{-0.353657990694046, -0.641973972320557, 0.680290997028351},
	{0.0416489988565445, -0.611272990703583, 0.79032301902771},
	{0.348342001438141, -0.779182970523834, 0.521086990833282},
	{0.499166995286942, -0.622440993785858, 0.602825999259949},
	{0.790018975734711, -0.3038310110569, 0.53250002861023},
	{0.660117983818054, 0.0607330016791821, 0.748701989650726},
	{0.604920983314514, 0.29416099190712, 0.739960014820099},
	{0.38569700717926, 0.379346013069153, 0.841032028198242},
	{0.239693000912666, 0.207875996828079, 0.948332011699677},
	{0.012622999958694, 0.258531987667084, 0.965919971466065},
	{-0.100556999444962, 0.457147002220154, 0.883687973022461},
	{0.0469669997692108, 0.628588020801544, 0.776319026947021},
	{-0.430391013622284, -0.445405006408691, 0.785097002983093},
	{-0.434291005134583, -0.196227997541428, 0.879139006137848},
	{-0.256637006998062, -0.33686700463295, 0.905902028083801},
	{-0.131372004747391, -0.158910006284714, 0.978514015674591},
	{0.102379001677036, -0.208766996860504, 0.972591996192932},
	{0.195686995983124, -0.450129002332687, 0.871258020401001},
	{0.627318978309631, -0.42314800620079, 0.653770983219147},
	{0.687439024448395, -0.171582996845245, 0.70568197965622},
	{0.275920003652573, -0.021254999563098, 0.960946023464203},
	{0.459367007017136, 0.157465994358063, 0.874177992343903},
	{0.285394996404648, 0.583184003829956, 0.760555982589722},
	{-0.812174022197723, 0.460303008556366, 0.358460992574692},
	{-0.189068004488945, 0.641223013401032, 0.743698000907898},
	{-0.338874995708466, 0.476480007171631, 0.811251997947693},
	{-0.920993983745575, 0.347185999155045, 0.176726996898651},
	{0.0406389981508255, 0.024465000256896, 0.998874008655548},
	{-0.739131987094879, -0.353747010231018, 0.573189973831177},
	{-0.603511989116669, -0.286615014076233, 0.744059979915619},
	{-0.188675999641418, -0.547058999538422, 0.815554022789001},
	{-0.0260450001806021, -0.397819995880127, 0.917093992233276},
	{0.267897009849548, -0.649040997028351, 0.712023019790649},
	{0.518245995044708, -0.28489100933075, 0.806385993957519},
	{0.493450999259949, -0.0665329992771149, 0.867224991321564},
	{-0.328188002109528, 0.140250995755196, 0.934143006801605},
	{-0.328188002109528, 0.140250995755196, 0.934143006801605},
	{-0.328188002109528, 0.140250995755196, 0.934143006801605},
	{-0.328188002109528, 0.140250995755196, 0.934143006801605},
}
